@page "/"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;
@inject IEmployeeServices EmployeeService
@inject IBundyStateService BundyStateService

<PageTitle>NWPC Bundy Clock</PageTitle>
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<div class="bundy-container">

<div class="current-date-time-container">
    <p class="current-time" id="current-time"></p>
    <p class="current-day-date" id="current-day-date"></p>
</div>

<div class="numpad-container" id="onScreenNumpad">
    <div class="numpad">
        <button class="digit" onclick="updateInput('1')">1</button>
        <button class="digit" onclick="updateInput('2')">2</button>
        <button class="digit" onclick="updateInput('3')">3</button>
        <button class="digit" onclick="updateInput('4')">4</button>
        <button class="digit" onclick="updateInput('5')">5</button>
        <button class="digit" onclick="updateInput('6')">6</button>
        <button class="digit" onclick="updateInput('7')">7</button>
        <button class="digit" onclick="updateInput('8')">8</button>
        <button class="digit" onclick="updateInput('9')">9</button>
        <button class="switch-key" onclick="toggleKeypad()">abc</button>
        <button class="digit" onclick="updateInput('0')">0</button>
        <button class="digit del" onclick="deleteLast()">&#9003;</button>
    </div>
</div>

    <div class="letter-keypad-container hidden" id="onScreenletterKeypad">
    <div class="keypad-container">
        <div class="keypad">
            <button class="keypad-letter" onclick="updateInput('q')">q</button>
            <button class="keypad-letter" onclick="updateInput('w')">w</button>
            <button class="keypad-letter" onclick="updateInput('e')">e</button>
            <button class="keypad-letter" onclick="updateInput('r')">r</button>
            <button class="keypad-letter" onclick="updateInput('t')">t</button>
            <button class="keypad-letter" onclick="updateInput('y')">y</button>
            <button class="keypad-letter" onclick="updateInput('u')">u</button>
            <button class="keypad-letter" onclick="updateInput('i')">i</button>
            <button class="keypad-letter" onclick="updateInput('o')">o</button>
            <button class="keypad-letter" onclick="updateInput('p')">p</button>
            <button class="keypad-letter" onclick="updateInput('a')">a</button>
            <button class="keypad-letter" onclick="updateInput('s')">s</button>
            <button class="keypad-letter" onclick="updateInput('d')">d</button>
            <button class="keypad-letter" onclick="updateInput('f')">f</button>
            <button class="keypad-letter" onclick="updateInput('g')">g</button>
            <button class="keypad-letter" onclick="updateInput('h')">h</button>
            <button class="keypad-letter" onclick="updateInput('j')">j</button>
            <button class="keypad-letter" onclick="updateInput('k')">k</button>
            <button class="keypad-letter" onclick="updateInput('l')">l</button>
            <button class="keypad-letter dum"></button>
            <button class="switch-key-abc" onclick="toggleKeypad()">123</button>
            <button class="keypad-letter" onclick="updateInput('z')">z</button>
            <button class="keypad-letter" onclick="updateInput('x')">x</button>
            <button class="keypad-letter" onclick="updateInput('c')">c</button>
            <button class="keypad-letter" onclick="updateInput('v')">v</button>
            <button class="keypad-letter" onclick="updateInput('b')">b</button>
            <button class="keypad-letter" onclick="updateInput('n')">n</button>
            <button class="keypad-letter" onclick="updateInput('m')">m</button>
            <button class="keypad-letter del" onclick="deleteLast()">&#9003;</button>
        </div>
    </div>
</div>

<!-- Forms for Bundy Selection and ID -->
<div class="forms-container">

        <MudField Label="Select Bundy Type:" Variant="Variant.Outlined">
            <button type="submit" class="time-in" onclick="highlightButton(this)">Time In</button>
            <button type="submit" class="time-out" onclick="highlightButton(this)">Time Out</button>
            <button type="submit" class="lunch-in" onclick="highlightButton(this)">Lunch In</button>
            <button type="submit" class="lunch-out" onclick="highlightButton(this)">Lunch Out</button>
        </MudField>


        <MudGrid>
            <MudItem xs="12" sm="12" md="12">
                <div class="d-flex align-center">
                    <MudAutocomplete T="EmployeeData" Id="employeeInput" Label="Search Employee" @bind-Value="selectedEmployee" SearchFunc="@SearchEmployees"
                                     AdornmentIcon="@Icons.Material.Filled.Person" AdornmentColor="Color.Primary" style="padding-top: 4%;"
                                     AnchorOrigin="Origin.BottomCenter" MaxHeight="200" Clearable ResetValueOnEmptyText="true"
                                     autocomplete="off">
                        <ItemTemplate Context="result">
                            <MudItem Class="d-flex align-center">
                                <div class="d-flex align-center">
                                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(@result.EmployeePhoto)" alt="Employee Photo" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px;" />
                                    <MudText>@result.EmployeeName</MudText>
                                    <MudChip Variant="Variant.Outlined" Color="Color.Primary" style="margin-left: 10px;">@result.EmployeeID.ToString()</MudChip>
                                </div>
                            </MudItem>
                        </ItemTemplate>
                    </MudAutocomplete>
                </div>
            </MudItem>
        </MudGrid>

        <button @onclick="SubmitForm" class="submit">Submit</button>
</div>
</div>

<!-- Green Rounded Rectangle behind the Main Bundy Container -->
<div class="bundy-container-two"></div>


@code {
    public EmployeeData selectedEmployee;
    public List<EmployeeData> Employees;

    protected override async Task OnInitializedAsync()
    {
        Employees = await EmployeeService.GetAllEmployees();
    }

    public async Task<IEnumerable<EmployeeData>> SearchEmployees(string? searchText)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(searchText) || Employees == null)
            return new List<EmployeeData>();

        return Employees.Where(employee =>
            employee.EmployeeName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
            employee.EmployeeID.ToString().Contains(searchText));
    }

    private async Task SubmitForm()
    {
        // Call the JavaScript function to get the bundyType value
        string bundyType = await JSRuntime.InvokeAsync<string>("getBundyType");

        // Check if bundyType and selectedEmployee are not empty
        if (!string.IsNullOrWhiteSpace(bundyType) && selectedEmployee != null)
        {
            // Set the bundyType in the shared state service
            BundyStateService.BundyType = bundyType;

            // Get the current date and time as string values
            BundyStateService.CurrentDate = DateTime.Now.ToString("dddd, MMMM d, yyyy");
            BundyStateService.CurrentTime = DateTime.Now.ToString("h:mm:ss tt");

            // Store the selected employee data
            BundyStateService.EmployeeName = selectedEmployee.EmployeeName;
            BundyStateService.EmployeeID = selectedEmployee.EmployeeID;
            BundyStateService.EmployeePhoto = selectedEmployee.EmployeePhoto;

            // Store the selected employee data
            BundyRecord newRecord = new BundyRecord
                {
                    EmployeeName = selectedEmployee.EmployeeName,
                    EmployeeID = selectedEmployee.EmployeeID,
                    BundyType = BundyStateService.BundyType,
                    CurrentDate = DateTime.Now.ToString("dddd, MMMM d, yyyy"),
                    CurrentTime = DateTime.Now.ToString("h:mm:ss tt")
                };

            // Add the new record to the DbSet
            DbContext.AllBundyRecords.Add(newRecord);

            // Save changes to the database
            await DbContext.SaveChangesAsync();

            // Redirect to the "/bundySuccess" page
            NavigationManager.NavigateTo("/bundySuccess");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call the JavaScript function to reset the bundyType value after the initial render
            await JSRuntime.InvokeVoidAsync("resetBundyType");
        }
    }
}
